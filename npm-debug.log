0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/russell.johnbaptiste/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
12 verbose folder .
13 info prepublish siftjs@1.0.5
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/russell.johnbaptiste/.npm/1f1177db-tar.lock
16 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
17 verbose lock tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz /Users/russell.johnbaptiste/.npm/093dc757-3867-0-07525097392499447-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
21 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
22 verbose tar unpack /Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
23 silly lockFile 0c92160d-aptiste-npm-siftjs-1-0-5-package tar:///Users/russell.johnbaptiste/.npm/siftjs/1.0.5/package
24 verbose lock tar:///Users/russell.johnbaptiste/.npm/siftjs/1.0.5/package /Users/russell.johnbaptiste/.npm/0c92160d-aptiste-npm-siftjs-1-0-5-package.lock
25 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
26 verbose lock tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz /Users/russell.johnbaptiste/.npm/093dc757-3867-0-07525097392499447-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm modified mode [ '.npmignore', 436, 420 ]
31 silly gunzTarPerm extractEntry README.md
32 silly gunzTarPerm extractEntry Sift.js
33 silly gunzTarPerm extractEntry .idea/.name
34 silly gunzTarPerm extractEntry .idea/encodings.xml
35 silly gunzTarPerm extractEntry .idea/jsLibraryMappings.xml
36 silly gunzTarPerm extractEntry .idea/libraries/sift_node_modules.xml
37 silly gunzTarPerm extractEntry .idea/misc.xml
38 silly gunzTarPerm extractEntry .idea/modules.xml
39 silly gunzTarPerm extractEntry .idea/scopes/scope_settings.xml
40 silly gunzTarPerm extractEntry .idea/sift.iml
41 silly gunzTarPerm extractEntry .idea/vcs.xml
42 silly gunzTarPerm extractEntry .idea/workspace.xml
43 silly gunzTarPerm extractEntry LICENSE-MIT
44 silly gunzTarPerm extractEntry img/siftbro.jpg
45 silly gunzTarPerm extractEntry spec/SiftSpec.js
46 silly lockFile 0c92160d-aptiste-npm-siftjs-1-0-5-package tar:///Users/russell.johnbaptiste/.npm/siftjs/1.0.5/package
47 silly lockFile 0c92160d-aptiste-npm-siftjs-1-0-5-package tar:///Users/russell.johnbaptiste/.npm/siftjs/1.0.5/package
48 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
49 silly lockFile 093dc757-3867-0-07525097392499447-tmp-tgz tar:///Users/russell.johnbaptiste/tmp/npm-15699-Em8SjNgj/1417544943867-0.07525097392499447/tmp.tgz
50 silly lockFile 3a52ce78- .
51 silly lockFile 3a52ce78- .
52 silly publish { name: 'siftjs',
52 silly publish   version: '1.0.5',
52 silly publish   description: 'Run your parameters through the Sift for validation;defining rules upfront, simplifying your js implementations',
52 silly publish   main: 'Sift.js',
52 silly publish   scripts: { test: 'jasmine-node spec/' },
52 silly publish   repository: { type: 'git', url: 'https://github.com/Luckvery/sift-js.git' },
52 silly publish   keywords: [ 'validation', 'argument-parser', 'parser', 'parsing' ],
52 silly publish   author:
52 silly publish    { name: 'Russell John-Baptiste',
52 silly publish      email: 'russell.john.baptiste@gmail.com',
52 silly publish      url: 'https://github.com/Luckvery' },
52 silly publish   licenses:
52 silly publish    { type: 'MIT',
52 silly publish      url: 'https://github.com/Luckvery/sift-js/blob/master/LICENSE-MIT' },
52 silly publish   bugs: { url: 'https://github.com/Luckvery/sift-js/issues' },
52 silly publish   homepage: 'https://github.com/Luckvery/sift-js',
52 silly publish   dependencies: { 'jasmine-node': '^1.14.5', lodash: '^2.4.1' },
52 silly publish   readme: '\n[<img src="https://raw.githubusercontent.com/Luckvery/sift-js/master/img/siftbro.jpg">]\n(https://raw.githubusercontent.com/Luckvery/sift-js/master/img/siftbro.jpg)\n\n\n# Sift\n`Sift(config, [ function | collection of objects ])`\n\n*Validations and typing on steriods*\n> Run your parameters through the Sift to define rules upfront, simplifying your js implementation.\n\nI use this a lot with grunt. I plan on using it in a few other js projects too.  I\'d love to hear any feed back on improvements and ways you\'ve used it!\n## Installation\n\n```shell\n  npm install siftjs --save\n```\n\n\n### The Sift Config Object\n\n\n#### <u>contract</u>\n\nType: `array`  \n\nList of valid parameter names.\n\n\n#### <u>args</u>\n\nType: `argument object`, `object literal` or `array`  \nDefault: `true`\n\nList/object of actual parameters.\n\n\n#### <u>pairedArgs</u>\n\nType: `Boolean`  \nDefault: `false`\n\nWhen false, Sift uses your contract property to map variable names to values. Order matters, so given a contract \n["foo", "bar"] the first  value of an Arguments obj or array will map to "foo" and the second value will map to "bar".\nWhen pairedArgs is set to true Sift will expect Argument objects and arrays passed to Sift config object property "args"\nto be in the form [paramName1, paramName1value, paramName2, paramName2value]. \n\n**Motivation:**\nI did this because I was running into a lot of collisions working with passing values on the command line to grunt. To get\naround it I found myself needing to parse something like `grunt task:paramName1:paramName1value:paramName1:paramName2value`\nfrom the command line. In my grunt task this.args would look like [paramName1, paramName1value, paramName2, paramName2value]\n\n#### <u>failOnError</u>\n\nType: `Boolean`\nDefault: `false`\n\nSet to true to fail task if Sift encounters an error. If set to false, any errors will cause Sift to return false.\n\n#### <u>rules</u>\n\nType: `Object`\n\nDeclaratively perform validation on parameters in Sift\'s contract\n\n|    Name             | Description                                              |\n|:-------------------:|:--------------------------------------------------------:|\n|atLeastOne|At least one argument in contract must have a value|\n|collections|Map parameters that are a collections to sift configs to evaluate them|\n|custom|Define custom validations with a callback function|\n|defaults|Set default values for arguments in this group that aren\'t present|\n|exclusive|Each argument in this group is mutually exclusive|\n|map|transform user input into some other value you may find more useful|\n|only|List the only allowable values for an argument|\n|oneForAll|If one argument exists, then all arguments in this group must be present|\n|required|An array of required arguments|\n|requires|Define dependants of an argument|\n|type|lodash based type checking|\n\n### Optional Second Argument\n\n#### <u>Function to be siftified</u>\n Type: `Function`\n \n When present, Sift will return the function so you might assign it to a variable (for example). After which when this\n function is called, its arguments will be evaluated by Sift. In practice arguments should be key/value object where keys\n are parameter names and values are values for respective parameter names. However, although less useful, it is also possible\n to pass an argument object or an array of alternating key, value pairs in the form, `["foo", "hello", "bar", "world"]`.\n\n#### <u>Collection of objects to be validated</u>\n Type: `Array`\n \n When present Sift will validate each object in the collection, returning the original collection if all objects are good.\n\n\n### Example usage\n\n#### Siftify that function\n```\n    var cool = function (name, email){\n        return name + " can\'t be reached at " + email;\n    };\n\n    var fn = Sift({\n        contract: ["name", "email"],\n        failOnError: true,\n        rules: {\n            required: ["name", "email"]\n        }\n    }, cool);\n\n    //logs "Russell can\'t be reached at notreallyrussell@gmail.com"\n    console.log(fn("Russell", "notreallyrussell@gmail.com"));\n\n```\n#### Use Sift to validate a collection\n```\n      var col = [\n            {"name":"Russell", "email":"russell@gmail.com"},\n            {"name":"David", "email":"david@gmail.com"},\n            {"name":"Paul", "email":"paul@gmail.com"},\n            {"name":"Shawn", "email":"shawn@gmail.com"},\n            {"name":"Fred", "email":"fred@gmail.com"},\n            {"name":"Dennis", "email":"dennis@gmail.com"},\n            {"name":"Andrew", "email":"andrew@gmail.com"}\n        ];\n\n        var colConfig = {\n          contract: ["name", "email"],\n          failOnError: true,\n          rules: {\n              required: ["name", "email"]\n          }\n        };\n\n        var assetAllObjectsInOriginalCollectionAreReturnedBySift = function () {\n            return _.every(Sift(colConfig, col), function (obj) {\n                return !_.isEmpty(_.where(col, obj));\n            }.bind(this));\n        };\n\n        console.log(assetAllObjectsInOriginalCollectionAreReturnedBySift()); // true!!\n\n```\n#### Use Sift to validate a nested collection\nConfigs for nested collections work as usual. The only thing you have to remember is that the args for nested config\n(in the Rules.collections object) will be ignored. Lets clarify this idea with the following code fragment from our\n[tests](https://github.com/Luckvery/sift-js/blob/master/spec/SiftSpec.js#L930 "Tests!!! Yay!!!" ):\n\n```\n        var captainCollection = [\n            {\'captain\': \'captain1\', \'email\': \'captain1@gmail.com\', wars: 3},\n            {\'captain\': \'captain2\', \'email\': \'captain2@gmail.com\', wars: 3},\n            {\'captain\': \'captain3\', \'email\': \'captain3@gmail.com\'},\n            {\'captain\': \'captain4\', \'email\': \'captain4@gmail.com\', wars: 4},\n            {\'captain\': \'captain5\', \'email\': \'captain5@gmail.com\', wars: 6}\n        ];\n\n        var captainCollectionConfig = {\n            // process current level in hierarchy\n            contract: [\'captain\', \'wars\', \'email\'],\n            failOnError: true,\n            pairedArgs: true,\n            rules: {\n                required: [\'captain\', \'email\', \'wars\'],\n                type:{\n                    \'wars\':[\'number\']\n                }\n            }\n        };\n\n        regionalCommanders = [\n            {\n                \'general\': \'Russell\',\n                ships: 6,\n                region: \'France\',\n                \'email\': \'russell@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'David\',\n                ships: 3,\n                region: \'England\',\n                \'email\': \'david@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Paul\',\n                ships: 1,\n                region: \'Spain\',\n                \'email\': \'paul@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Shawn\',\n                ships: 3,\n                region: \'Netherlands\',\n                \'email\': \'shawn@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Ryan\',\n                ships: 5,\n                region: \'Belgium\',\n                \'email\': \'ryan@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Anthony\',\n                ships: 9,\n                region: \'Ireland\',\n                \'email\': \'anthony@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Fred\',\n                ships: 7,\n                region: \'Germany\',\n                \'email\': \'fred@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Dennis\',\n                ships: 1,\n                region: \'Italy\',\n                \'email\': \'dennis@gmail.com\',\n                captains: captainCollection\n            },\n            {\n                \'general\': \'Andrew\',\n                ships: 7,\n                region: \'Switzerland\',\n                \'email\': \'andrew@gmail.com\',\n                captains: captainCollection\n            }\n        ];\n\n        regionalCommandersConfig = {\n            // process current level in hierarchy\n            contract: [\'general\', \'ships\', \'region\', \'email\', \'captains\'],\n            failOnError: true,\n            pairedArgs: true,\n            rules: {\n                required: [\'captains\'],\n                // process next level down in hierarchy\n                collections: {\n                    \'captains\': captainCollectionConfig\n                },\n                type:{\n                    \'ships\':[\'number\']\n                }\n            }\n        };\n\n        var mainConfig = {\n            contract: [\'planet\', \'attempt\', \'generals\'],\n            args: [\n                \'planet\',\n                \'earth\',\n                \'attempt\',\n                \'3\',\n                \'generals\',\n                regionalCommanders\n            ],\n            pairedArgs: true,\n            rules: {\n                collections: {\n                    \'generals\': regionalCommandersConfig\n                }\n            }\n        };\n\n        expect(function(){\n            Sift(mainConfig);\n        }).toThrow(\n            new Error(\n                \'\\nFailing Collection Item:\\n\'+\n                \'{"captain":"captain3","email":"captain3@gmail.com"}\'+\n                \'\\nCollection Failure!!\\n\'+\n                \'Sift.rules.required violation: \' +\n                \'1 or more required argument(s) missing. \' +\n                \'Required argument(s): [captain,email,wars]\'\n            )\n        );\n```\n#### Contrived grunt worker task\n```\nmodule.exports = function(grunt) {\n    grunt.registerTask(\n    \'worker\',\n    \'worker task to update files on S3 or DynamoDB\',\n    function() {\n\n        var inputObj = Sift(["update"],\n            this.args, {\n                only: {\n                    "update": ["s3Assets", "dynamoDBAssets"]\n                },\n                defaults: {\n                    "update": "s3Assets"\n                },\n                map:{\n                    "update"{\n                        "s3Assets": [\n                                      \'shell:buildS3AssetsLocally\', \n                                      \'shell:pushToS3\'\n                        ],\n                        "dynamoDBAssets": [\n                                      \'shell:buildDynamoAssetsLocally\', \n                                      \'shell:pushToS3\', \n                                      \'shell:cleanTempFiles\'\n                        ]\n                    }\n                }\n            }, true);\n\n        turnOffTaskLogHeader([\n            \'shell\'\n        ]);\n\n        grunt.task.run(inputObj["update"]);\n    });\n};\n\n```\n#### Contrived total usage\n```\nfooBar(){\n     var colConfig = {\n         contract: ["name", "email"],\n         failOnError: true,\n         rules: {\n             required: ["name", "email"]\n         }\n     };\n\n     var col = [\n        {"name":"Russell", "email":"russell@gmail.com"},\n        {"name":"David", "email":"david@gmail.com"},\n        {"name":"Paul", "email":"paul@gmail.com"},\n        {"name":"Fred", "email":"fred@gmail.com"},\n        {"name":"Dennis", "email":"dennis@gmail.com"},\n        {"name":"Andrew", "email":"andrew@gmail.com"}\n     ];\n\n     var inputObj = Sift({\n        contract:[\n          "url", "named", "clientId", "reconcile", "shell", "config", "year"\n        ],\n        args: arguments,\n        failOnError: true,\n        pairedArgs: true,\n        rules:{\n                exclusive: [\n                    ["url", "named"]\n                ],\n                collection: {\n                    "users": colConfig\n                },\n                requires: {\n                    "reconcile": ["clientId"]\n                },\n                only: {\n                    "shell": ["Terminal", "iTerm"],\n                    "config": ["yes", "no"]\n                },\n                defaults: {\n                    "shell": "Terminal"\n                },\n                oneForAll: ["module", "clientId"],\n                atleastOne: true,\n                required: ["name"],\n                map: {\n                    "config": {\n                        "yes": true,\n                        "no": false\n                    }\n                },\n               type:{\n                   "url":["String"],\n                   "year":["number"],\n                   "clientId":["String", "regex"]\n               },\n               custom:{\n                   "shell":function(value){\n                      return value.toLowerCase() == "terminal" \n                         || value.toLowerCase() == "iterm" \n                         || value.toLowerCase() == "gitbash";\n                    }\n               }        \n            }\n        });\n}\n```\n\n#### See Tests for more examples!!\n',
52 silly publish   readmeFilename: 'README.md',
52 silly publish   _id: 'siftjs@1.0.5',
52 silly publish   _shasum: 'c96bef0263d3f7bd1826df07f38d5f4d484cd2f6',
52 silly publish   _from: '.' }
53 verbose url raw siftjs
54 verbose url resolving [ 'https://registry.npmjs.org/', './siftjs' ]
55 verbose url resolved https://registry.npmjs.org/siftjs
56 info trying registry request attempt 1 at 13:29:04
57 http PUT https://registry.npmjs.org/siftjs
58 http 403 https://registry.npmjs.org/siftjs
59 verbose headers { date: 'Tue, 02 Dec 2014 18:29:04 GMT',
59 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
59 verbose headers   'content-type': 'application/json',
59 verbose headers   'cache-control': 'max-age=60',
59 verbose headers   'content-length': '18718',
59 verbose headers   'accept-ranges': 'bytes',
59 verbose headers   via: '1.1 varnish',
59 verbose headers   'x-served-by': 'cache-atl6223-ATL',
59 verbose headers   'x-cache': 'MISS',
59 verbose headers   'x-cache-hits': '0',
59 verbose headers   'x-timer': 'S1417544944.070333,VS0,VE256',
59 verbose headers   'keep-alive': 'timeout=10, max=50',
59 verbose headers   connection: 'Keep-Alive' }
60 error publish Failed PUT 403
61 error Error: forbidden cannot modify pre-existing version: 1.0.5
61 error old={"name":"siftjs","version":"1.0.5","description":"Run your parameters through the Sift for validation;defining rules upfront, simplifying your js implementations","main":"Sift.js","scripts":{"test":"jasmine-node spec/"},"repository":{"type":"git","url":"https://github.com/Luckvery/sift-js.git"},"keywords":["validation","argument-parser","parser","parsing"],"author":{"name":"Russell John-Baptiste","email":"russell.john.baptiste@gmail.com","url":"https://github.com/Luckvery"},"licenses":{"type":"MIT","url":"https://github.com/Luckvery/sift-js/blob/master/LICENSE-MIT"},"bugs":{"url":"https://github.com/Luckvery/sift-js/issues"},"homepage":"https://github.com/Luckvery/sift-js","dependencies":{"jasmine-node":"^1.14.5","lodash":"^2.4.1"},"_id":"siftjs@1.0.5","_shasum":"943f7b20d3f48c89a6fb3c44ad7d9516b25692d8","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"luckvery","email":"russell.john.baptiste@gmail.com"},"maintainers":[{"name":"luckvery","email":"russell.john.baptiste@gmail.com"}],"dist":{"shasum":"943f7b20d3f48c89a6fb3c44ad7d9516b25692d8","tarball":"http://registry.npmjs.org/siftjs/-/siftjs-1.0.5.tgz"}}
61 error new={"name":"siftjs","version":"1.0.5","description":"Run your parameters through the Sift for validation;defining rules upfront, simplifying your js implementations","main":"Sift.js","scripts":{"test":"jasmine-node spec/"},"repository":{"type":"git","url":"https://github.com/Luckvery/sift-js.git"},"keywords":["validation","argument-parser","parser","parsing"],"author":{"name":"Russell John-Baptiste","email":"russell.john.baptiste@gmail.com","url":"https://github.com/Luckvery"},"licenses":{"type":"MIT","url":"https://github.com/Luckvery/sift-js/blob/master/LICENSE-MIT"},"bugs":{"url":"https://github.com/Luckvery/sift-js/issues"},"homepage":"https://github.com/Luckvery/sift-js","dependencies":{"jasmine-node":"^1.14.5","lodash":"^2.4.1"},"readme":"\u000a[<img src=\"https://raw.githubusercontent.com/Luckvery/sift-js/master/img/siftbro.jpg\">]\u000a(https://raw.githubusercontent.com/Luckvery/sift-js/master/img/siftbro.jpg)\u000a\u000a\u000a# Sift\u000a`Sift(config, [ function | collection of objects ])`\u000a\u000a*Validations and typing on steriods*\u000a> Run your parameters through the Sift to define rules upfront, simplifying your js implementation.\u000a\u000aI use this a lot with grunt. I plan on using it in a few other js projects too.  I'd love to hear any feed back on improvements and ways you've used it!\u000a## Installation\u000a\u000a```shell\u000a  npm install siftjs --save\u000a```\u000a\u000a\u000a### The Sift Config Object\u000a\u000a\u000a#### <u>contract</u>\u000a\u000aType: `array`  \u000a\u000aList of valid parameter names.\u000a\u000a\u000a#### <u>args</u>\u000a\u000aType: `argument object`, `object literal` or `array`  \u000aDefault: `true`\u000a\u000aList/object of actual parameters.\u000a\u000a\u000a#### <u>pairedArgs</u>\u000a\u000aType: `Boolean`  \u000aDefault: `false`\u000a\u000aWhen false, Sift uses your contract property to map variable names to values. Order matters, so given a contract \u000a[\"foo\", \"bar\"] the first  value of an Arguments obj or array will map to \"foo\" and the second value will map to \"bar\".\u000aWhen pairedArgs is set to true Sift will expect Argument objects and arrays passed to Sift config object property \"args\"\u000ato be in the form [paramName1, paramName1value, paramName2, paramName2value]. \u000a\u000a**Motivation:**\u000aI did this because I was running into a lot of collisions working with passing values on the command line to grunt. To get\u000aaround it I found myself needing to parse something like `grunt task:paramName1:paramName1value:paramName1:paramName2value`\u000afrom the command line. In my grunt task this.args would look like [paramName1, paramName1value, paramName2, paramName2value]\u000a\u000a#### <u>failOnError</u>\u000a\u000aType: `Boolean`\u000aDefault: `false`\u000a\u000aSet to true to fail task if Sift encounters an error. If set to false, any errors will cause Sift to return false.\u000a\u000a#### <u>rules</u>\u000a\u000aType: `Object`\u000a\u000aDeclaratively perform validation on parameters in Sift's contract\u000a\u000a|    Name             | Description                                              |\u000a|:-------------------:|:--------------------------------------------------------:|\u000a|atLeastOne|At least one argument in contract must have a value|\u000a|collections|Map parameters that are a collections to sift configs to evaluate them|\u000a|custom|Define custom validations with a callback function|\u000a|defaults|Set default values for arguments in this group that aren't present|\u000a|exclusive|Each argument in this group is mutually exclusive|\u000a|map|transform user input into some other value you may find more useful|\u000a|only|List the only allowable values for an argument|\u000a|oneForAll|If one argument exists, then all arguments in this group must be present|\u000a|required|An array of required arguments|\u000a|requires|Define dependants of an argument|\u000a|type|lodash based type checking|\u000a\u000a### Optional Second Argument\u000a\u000a#### <u>Function to be siftified</u>\u000a Type: `Function`\u000a \u000a When present, Sift will return the function so you might assign it to a variable (for example). After which when this\u000a function is called, its arguments will be evaluated by Sift. In practice arguments should be key/value object where keys\u000a are parameter names and values are values for respective parameter names. However, although less useful, it is also possible\u000a to pass an argument object or an array of alternating key, value pairs in the form, `[\"foo\", \"hello\", \"bar\", \"world\"]`.\u000a\u000a#### <u>Collection of objects to be validated</u>\u000a Type: `Array`\u000a \u000a When present Sift will validate each object in the collection, returning the original collection if all objects are good.\u000a\u000a\u000a### Example usage\u000a\u000a#### Siftify that function\u000a```\u000a    var cool = function (name, email){\u000a        return name + \" can't be reached at \" + email;\u000a    };\u000a\u000a    var fn = Sift({\u000a        contract: [\"name\", \"email\"],\u000a        failOnError: true,\u000a        rules: {\u000a            required: [\"name\", \"email\"]\u000a        }\u000a    }, cool);\u000a\u000a    //logs \"Russell can't be reached at notreallyrussell@gmail.com\"\u000a    console.log(fn(\"Russell\", \"notreallyrussell@gmail.com\"));\u000a\u000a```\u000a#### Use Sift to validate a collection\u000a```\u000a      var col = [\u000a            {\"name\":\"Russell\", \"email\":\"russell@gmail.com\"},\u000a            {\"name\":\"David\", \"email\":\"david@gmail.com\"},\u000a            {\"name\":\"Paul\", \"email\":\"paul@gmail.com\"},\u000a            {\"name\":\"Shawn\", \"email\":\"shawn@gmail.com\"},\u000a            {\"name\":\"Fred\", \"email\":\"fred@gmail.com\"},\u000a            {\"name\":\"Dennis\", \"email\":\"dennis@gmail.com\"},\u000a            {\"name\":\"Andrew\", \"email\":\"andrew@gmail.com\"}\u000a        ];\u000a\u000a        var colConfig = {\u000a          contract: [\"name\", \"email\"],\u000a          failOnError: true,\u000a          rules: {\u000a              required: [\"name\", \"email\"]\u000a          }\u000a        };\u000a\u000a        var assetAllObjectsInOriginalCollectionAreReturnedBySift = function () {\u000a            return _.every(Sift(colConfig, col), function (obj) {\u000a                return !_.isEmpty(_.where(col, obj));\u000a            }.bind(this));\u000a        };\u000a\u000a        console.log(assetAllObjectsInOriginalCollectionAreReturnedBySift()); // true!!\u000a\u000a```\u000a#### Use Sift to validate a nested collection\u000aConfigs for nested collections work as usual. The only thing you have to remember is that the args for nested config\u000a(in the Rules.collections object) will be ignored. Lets clarify this idea with the following code fragment from our\u000a[tests](https://github.com/Luckvery/sift-js/blob/master/spec/SiftSpec.js#L930 \"Tests!!! Yay!!!\" ):\u000a\u000a```\u000a        var captainCollection = [\u000a            {'captain': 'captain1', 'email': 'captain1@gmail.com', wars: 3},\u000a            {'captain': 'captain2', 'email': 'captain2@gmail.com', wars: 3},\u000a            {'captain': 'captain3', 'email': 'captain3@gmail.com'},\u000a            {'captain': 'captain4', 'email': 'captain4@gmail.com', wars: 4},\u000a            {'captain': 'captain5', 'email': 'captain5@gmail.com', wars: 6}\u000a        ];\u000a\u000a        var captainCollectionConfig = {\u000a            // process current level in hierarchy\u000a            contract: ['captain', 'wars', 'email'],\u000a            failOnError: true,\u000a            pairedArgs: true,\u000a            rules: {\u000a                required: ['captain', 'email', 'wars'],\u000a                type:{\u000a                    'wars':['number']\u000a                }\u000a            }\u000a        };\u000a\u000a        regionalCommanders = [\u000a            {\u000a                'general': 'Russell',\u000a                ships: 6,\u000a                region: 'France',\u000a                'email': 'russell@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'David',\u000a                ships: 3,\u000a                region: 'England',\u000a                'email': 'david@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Paul',\u000a                ships: 1,\u000a                region: 'Spain',\u000a                'email': 'paul@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Shawn',\u000a                ships: 3,\u000a                region: 'Netherlands',\u000a                'email': 'shawn@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Ryan',\u000a                ships: 5,\u000a                region: 'Belgium',\u000a                'email': 'ryan@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Anthony',\u000a                ships: 9,\u000a                region: 'Ireland',\u000a                'email': 'anthony@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Fred',\u000a                ships: 7,\u000a                region: 'Germany',\u000a                'email': 'fred@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Dennis',\u000a                ships: 1,\u000a                region: 'Italy',\u000a                'email': 'dennis@gmail.com',\u000a                captains: captainCollection\u000a            },\u000a            {\u000a                'general': 'Andrew',\u000a                ships: 7,\u000a                region: 'Switzerland',\u000a                'email': 'andrew@gmail.com',\u000a                captains: captainCollection\u000a            }\u000a        ];\u000a\u000a        regionalCommandersConfig = {\u000a            // process current level in hierarchy\u000a            contract: ['general', 'ships', 'region', 'email', 'captains'],\u000a            failOnError: true,\u000a            pairedArgs: true,\u000a            rules: {\u000a                required: ['captains'],\u000a                // process next level down in hierarchy\u000a                collections: {\u000a                    'captains': captainCollectionConfig\u000a                },\u000a                type:{\u000a                    'ships':['number']\u000a                }\u000a            }\u000a        };\u000a\u000a        var mainConfig = {\u000a            contract: ['planet', 'attempt', 'generals'],\u000a            args: [\u000a                'planet',\u000a                'earth',\u000a                'attempt',\u000a                '3',\u000a                'generals',\u000a                regionalCommanders\u000a            ],\u000a            pairedArgs: true,\u000a            rules: {\u000a                collections: {\u000a                    'generals': regionalCommandersConfig\u000a                }\u000a            }\u000a        };\u000a\u000a        expect(function(){\u000a            Sift(mainConfig);\u000a        }).toThrow(\u000a            new Error(\u000a                '\\nFailing Collection Item:\\n'+\u000a                '{\"captain\":\"captain3\",\"email\":\"captain3@gmail.com\"}'+\u000a                '\\nCollection Failure!!\\n'+\u000a                'Sift.rules.required violation: ' +\u000a                '1 or more required argument(s) missing. ' +\u000a                'Required argument(s): [captain,email,wars]'\u000a            )\u000a        );\u000a```\u000a#### Contrived grunt worker task\u000a```\u000amodule.exports = function(grunt) {\u000a    grunt.registerTask(\u000a    'worker',\u000a    'worker task to update files on S3 or DynamoDB',\u000a    function() {\u000a\u000a        var inputObj = Sift([\"update\"],\u000a            this.args, {\u000a                only: {\u000a                    \"update\": [\"s3Assets\", \"dynamoDBAssets\"]\u000a                },\u000a                defaults: {\u000a                    \"update\": \"s3Assets\"\u000a                },\u000a                map:{\u000a                    \"update\"{\u000a                        \"s3Assets\": [\u000a                                      'shell:buildS3AssetsLocally', \u000a                                      'shell:pushToS3'\u000a                        ],\u000a                        \"dynamoDBAssets\": [\u000a                                      'shell:buildDynamoAssetsLocally', \u000a                                      'shell:pushToS3', \u000a                                      'shell:cleanTempFiles'\u000a                        ]\u000a                    }\u000a                }\u000a            }, true);\u000a\u000a        turnOffTaskLogHeader([\u000a            'shell'\u000a        ]);\u000a\u000a        grunt.task.run(inputObj[\"update\"]);\u000a    });\u000a};\u000a\u000a```\u000a#### Contrived total usage\u000a```\u000afooBar(){\u000a     var colConfig = {\u000a         contract: [\"name\", \"email\"],\u000a         failOnError: true,\u000a         rules: {\u000a             required: [\"name\", \"email\"]\u000a         }\u000a     };\u000a\u000a     var col = [\u000a        {\"name\":\"Russell\", \"email\":\"russell@gmail.com\"},\u000a        {\"name\":\"David\", \"email\":\"david@gmail.com\"},\u000a        {\"name\":\"Paul\", \"email\":\"paul@gmail.com\"},\u000a        {\"name\":\"Fred\", \"email\":\"fred@gmail.com\"},\u000a        {\"name\":\"Dennis\", \"email\":\"dennis@gmail.com\"},\u000a        {\"name\":\"Andrew\", \"email\":\"andrew@gmail.com\"}\u000a     ];\u000a\u000a     var inputObj = Sift({\u000a        contract:[\u000a          \"url\", \"named\", \"clientId\", \"reconcile\", \"shell\", \"config\", \"year\"\u000a        ],\u000a        args: arguments,\u000a        failOnError: true,\u000a        pairedArgs: true,\u000a        rules:{\u000a                exclusive: [\u000a                    [\"url\", \"named\"]\u000a                ],\u000a                collection: {\u000a                    \"users\": colConfig\u000a                },\u000a                requires: {\u000a                    \"reconcile\": [\"clientId\"]\u000a                },\u000a                only: {\u000a                    \"shell\": [\"Terminal\", \"iTerm\"],\u000a                    \"config\": [\"yes\", \"no\"]\u000a                },\u000a                defaults: {\u000a                    \"shell\": \"Terminal\"\u000a                },\u000a                oneForAll: [\"module\", \"clientId\"],\u000a                atleastOne: true,\u000a                required: [\"name\"],\u000a                map: {\u000a                    \"config\": {\u000a                        \"yes\": true,\u000a                        \"no\": false\u000a                    }\u000a                },\u000a               type:{\u000a                   \"url\":[\"String\"],\u000a                   \"year\":[\"number\"],\u000a                   \"clientId\":[\"String\", \"regex\"]\u000a               },\u000a               custom:{\u000a                   \"shell\":function(value){\u000a                      return value.toLowerCase() == \"terminal\" \u000a                         || value.toLowerCase() == \"iterm\" \u000a                         || value.toLowerCase() == \"gitbash\";\u000a                    }\u000a               }        \u000a            }\u000a        });\u000a}\u000a```\u000a\u000a#### See Tests for more examples!!\u000a","readmeFilename":"README.md","_id":"siftjs@1.0.5","_shasum":"c96bef0263d3f7bd1826df07f38d5f4d484cd2f6","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"luckvery","email":"russell.john.baptiste@gmail.com"},"maintainers":[{"name":"luckvery","email":"russell.john.baptiste@gmail.com"}],"dist":{"shasum":"c96bef0263d3f7bd1826df07f38d5f4d484cd2f6","tarball":"http://registry.npmjs.org/siftjs/-/siftjs-1.0.5.tgz"}}: siftjs
61 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:273:14)
61 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:211:65)
61 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
61 error     at Request.EventEmitter.emit (events.js:98:17)
61 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
61 error     at Request.EventEmitter.emit (events.js:117:20)
61 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
61 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
61 error     at _stream_readable.js:919:16
61 error     at process._tickCallback (node.js:419:13)
62 error If you need help, you may report this *entire* log,
62 error including the npm and node versions, at:
62 error     <http://github.com/npm/npm/issues>
63 error System Darwin 13.4.0
64 error command "node" "/usr/local/bin/npm" "publish"
65 error cwd /Users/russell.johnbaptiste/Projects/sift
66 error node -v v0.10.28
67 error npm -v 1.4.9
68 verbose exit [ 1, true ]
